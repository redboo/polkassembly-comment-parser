import logging
from datetime import datetime
from typing import Any

import requests

from constants import URL_ENDPOINTS


def get_post_and_comments_data(
    url: str,
    is_on: str,
    proposal_type: str,
    post_id: int | str,
    session: requests.Session,
    start_date: datetime | None = None,
    end_date: datetime | None = None,
) -> list[Any]:
    """
    –§—É–Ω–∫—Ü–∏—è get_post_and_comments_data –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:

    - `url (str)`: –ë–∞–∑–æ–≤—ã–π URL –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ Polkassembly.
    - `is_on (str)`: –¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"on" `–∏–ª–∏ `"off"`).
    - `proposal_type (str)`: –¢–∏–ø –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"proposal"` –∏–ª–∏ `"referendum"`).
    - `post_id (int|str)`: ID –ø–æ—Å—Ç–∞.
    - `session (requests.Session)`: –°–µ—Å—Å–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.
    - `start_date (datetime, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
    - `end_date (datetime, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`: –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    `list`: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ CSV-—Ñ–∞–π–ª."""
    post_url = f"https://api.polkassembly.io/api/v1/posts/{is_on}-chain-post"
    params = {"postId": post_id, "proposalType": proposal_type}
    rows = []

    try:
        response_post = session.get(post_url, params=params, timeout=20)
        response_post.raise_for_status()
        post_data = response_post.json()

        post_id = post_data["post_id"] if post_data.get("post_id") else post_data.get("hash", "None")
        post_link = f"{url}{URL_ENDPOINTS.get(proposal_type, '')}/{post_id}"
        post_type = post_data.get("type", proposal_type.title())
        post_title = str(post_data.get("title", "Untitled")).strip() or "Untitled"
        post_comments = post_data.get("comments", [])
        post_date = datetime.strptime(post_data["created_at"], "%Y-%m-%dT%H:%M:%S.%fZ")

        if post_comments:
            comments = []
            for comment in post_comments:
                comment_date = datetime.strptime(comment["created_at"], "%Y-%m-%dT%H:%M:%S.%fZ")
                if (start_date and comment_date < start_date) or (end_date and comment_date > end_date):
                    continue
                comments.append(get_row_data(post_data, post_type, post_link, comment))
            if comments:
                rows.extend(comments)
                logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ [{post_title}]: {post_link}")
        else:
            if (start_date and post_date < start_date) or (end_date and post_date > end_date):
                return rows
            rows.append(get_row_data(post_data, post_type, post_link))
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å—Ç [{post_title}]: {post_link}")

    except requests.exceptions.ReadTimeout:
        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {post_url} {params} {url}")
    except requests.exceptions.RequestException:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: {post_id}")

    return rows


def get_row_data(post_data: dict, post_type: str, post_link: str, comment_data: dict | None = None) -> list[Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ CSV-—Ñ–∞–π–ª.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - `post_data(dict)` : –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞.
    - `post_type(str)` : –¢–∏–ø –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "proposal" –∏–ª–∏ "referendum").
    - `post_link (str)`: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç.
    - `comment_data (dict | None)`: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    `list`: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ CSV-—Ñ–∞–π–ª."""
    return [
        post_type,
        post_data["topic"]["name"],
        post_data["created_at"][:19].replace("T", " "),
        post_data.get("user_id"),
        post_data.get("username"),
        str(post_data.get("title", "Untitled")).strip() or "Untitled",
        post_data.get("content", "").replace("\n", " "),
        post_data.get("status"),
        post_data["post_reactions"]["üëç"]["count"],
        post_data["post_reactions"]["üëé"]["count"],
        comment_data["content"].replace("\n", " ") if comment_data else "",
        comment_data["username"] if comment_data else "",
        comment_data["created_at"][:19].replace("T", " ") if comment_data else "",
        comment_data["comment_reactions"]["üëç"]["count"] if comment_data else "",
        comment_data["comment_reactions"]["üëé"]["count"] if comment_data else "",
        post_link,
    ]
